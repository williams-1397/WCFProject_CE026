//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyWebClient.CurrencyConversionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyConversionService.ICurrencyConversionService")]
    public interface ICurrencyConversionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertINRTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertINRToResponse")]
        double ConvertINRTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertINRTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertINRToResponse")]
        System.Threading.Tasks.Task<double> ConvertINRToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertUSDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertUSDToResponse")]
        double ConvertUSDTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertUSDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertUSDToResponse")]
        System.Threading.Tasks.Task<double> ConvertUSDToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertCADTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertCADToResponse")]
        double ConvertCADTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertCADTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertCADToResponse")]
        System.Threading.Tasks.Task<double> ConvertCADToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertGBPTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertGBPToResponse")]
        double ConvertGBPTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertGBPTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertGBPToResponse")]
        System.Threading.Tasks.Task<double> ConvertGBPToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertYENTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertYENToResponse")]
        double ConvertYENTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertYENTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertYENToResponse")]
        System.Threading.Tasks.Task<double> ConvertYENToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertEUROTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertEUROToResponse")]
        double ConvertEUROTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertEUROTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertEUROToResponse")]
        System.Threading.Tasks.Task<double> ConvertEUROToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertPKRTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertPKRToResponse")]
        double ConvertPKRTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertPKRTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertPKRToResponse")]
        System.Threading.Tasks.Task<double> ConvertPKRToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertYUANTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertYUANToResponse")]
        double ConvertYUANTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertYUANTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertYUANToResponse")]
        System.Threading.Tasks.Task<double> ConvertYUANToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertNZDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertNZDToResponse")]
        double ConvertNZDTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertNZDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertNZDToResponse")]
        System.Threading.Tasks.Task<double> ConvertNZDToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertAEDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertAEDToResponse")]
        double ConvertAEDTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertAEDTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertAEDToResponse")]
        System.Threading.Tasks.Task<double> ConvertAEDToAsync(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertRUBTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertRUBToResponse")]
        double ConvertRUBTo(double amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionService/ConvertRUBTo", ReplyAction="http://tempuri.org/ICurrencyConversionService/ConvertRUBToResponse")]
        System.Threading.Tasks.Task<double> ConvertRUBToAsync(double amount, string currency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConversionServiceChannel : CurrencyWebClient.CurrencyConversionService.ICurrencyConversionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConversionServiceClient : System.ServiceModel.ClientBase<CurrencyWebClient.CurrencyConversionService.ICurrencyConversionService>, CurrencyWebClient.CurrencyConversionService.ICurrencyConversionService {
        
        public CurrencyConversionServiceClient() {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double ConvertINRTo(double amount, string currency) {
            return base.Channel.ConvertINRTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertINRToAsync(double amount, string currency) {
            return base.Channel.ConvertINRToAsync(amount, currency);
        }
        
        public double ConvertUSDTo(double amount, string currency) {
            return base.Channel.ConvertUSDTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertUSDToAsync(double amount, string currency) {
            return base.Channel.ConvertUSDToAsync(amount, currency);
        }
        
        public double ConvertCADTo(double amount, string currency) {
            return base.Channel.ConvertCADTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertCADToAsync(double amount, string currency) {
            return base.Channel.ConvertCADToAsync(amount, currency);
        }
        
        public double ConvertGBPTo(double amount, string currency) {
            return base.Channel.ConvertGBPTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertGBPToAsync(double amount, string currency) {
            return base.Channel.ConvertGBPToAsync(amount, currency);
        }
        
        public double ConvertYENTo(double amount, string currency) {
            return base.Channel.ConvertYENTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertYENToAsync(double amount, string currency) {
            return base.Channel.ConvertYENToAsync(amount, currency);
        }
        
        public double ConvertEUROTo(double amount, string currency) {
            return base.Channel.ConvertEUROTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertEUROToAsync(double amount, string currency) {
            return base.Channel.ConvertEUROToAsync(amount, currency);
        }
        
        public double ConvertPKRTo(double amount, string currency) {
            return base.Channel.ConvertPKRTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertPKRToAsync(double amount, string currency) {
            return base.Channel.ConvertPKRToAsync(amount, currency);
        }
        
        public double ConvertYUANTo(double amount, string currency) {
            return base.Channel.ConvertYUANTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertYUANToAsync(double amount, string currency) {
            return base.Channel.ConvertYUANToAsync(amount, currency);
        }
        
        public double ConvertNZDTo(double amount, string currency) {
            return base.Channel.ConvertNZDTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertNZDToAsync(double amount, string currency) {
            return base.Channel.ConvertNZDToAsync(amount, currency);
        }
        
        public double ConvertAEDTo(double amount, string currency) {
            return base.Channel.ConvertAEDTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertAEDToAsync(double amount, string currency) {
            return base.Channel.ConvertAEDToAsync(amount, currency);
        }
        
        public double ConvertRUBTo(double amount, string currency) {
            return base.Channel.ConvertRUBTo(amount, currency);
        }
        
        public System.Threading.Tasks.Task<double> ConvertRUBToAsync(double amount, string currency) {
            return base.Channel.ConvertRUBToAsync(amount, currency);
        }
    }
}
